
classdef Airspeed < ros.Message
    %Airspeed MATLAB implementation of cosmus_messages/Airspeed
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.
    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'cosmus_messages/Airspeed' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = 'b503fe4a6b8d1e7d3f42ab23d304a71b' % The MD5 Checksum of the message definition
        PropertyList = { 'Header' 'Velocity' 'DifferentialPressure' 'Intensity' } % List of non-constant message properties
        ROSPropertyList = { 'header' 'velocity' 'differential_pressure' 'intensity' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.std_msgs.Header' ...
            'ros.msggen.cosmus_messages.Vector3D' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Header
        Velocity
        DifferentialPressure
        Intensity
    end
    methods
        function set.Header(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.Header'};
            validateattributes(val, validClasses, validAttributes, 'Airspeed', 'Header')
            obj.Header = val;
        end
        function set.Velocity(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.cosmus_messages.Vector3D'};
            validateattributes(val, validClasses, validAttributes, 'Airspeed', 'Velocity')
            obj.Velocity = val;
        end
        function set.DifferentialPressure(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Airspeed', 'DifferentialPressure');
            obj.DifferentialPressure = single(val);
        end
        function set.Intensity(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Airspeed', 'Intensity');
            obj.Intensity = single(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.cosmus_messages.Airspeed.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.cosmus_messages.Airspeed(strObj);
        end
    end
end
