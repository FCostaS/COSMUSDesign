// Generated by gencpp from file cosmus_messages/NetworkComm.msg
// DO NOT EDIT!


#ifndef COSMUS_MESSAGES_MESSAGE_NETWORKCOMM_H
#define COSMUS_MESSAGES_MESSAGE_NETWORKCOMM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <cosmus_messages/Communication.h>

namespace cosmus_messages
{
template <class ContainerAllocator>
struct NetworkComm_
{
  typedef NetworkComm_<ContainerAllocator> Type;

  NetworkComm_()
    : comms()  {
    }
  NetworkComm_(const ContainerAllocator& _alloc)
    : comms(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::cosmus_messages::Communication_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::cosmus_messages::Communication_<ContainerAllocator> >::other >  _comms_type;
  _comms_type comms;





  typedef boost::shared_ptr< ::cosmus_messages::NetworkComm_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cosmus_messages::NetworkComm_<ContainerAllocator> const> ConstPtr;

}; // struct NetworkComm_

typedef ::cosmus_messages::NetworkComm_<std::allocator<void> > NetworkComm;

typedef boost::shared_ptr< ::cosmus_messages::NetworkComm > NetworkCommPtr;
typedef boost::shared_ptr< ::cosmus_messages::NetworkComm const> NetworkCommConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cosmus_messages::NetworkComm_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cosmus_messages::NetworkComm_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace cosmus_messages

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'cosmus_messages': ['/home/fabricio/catkin_ws/src/COSMUS_gnc/gnc_messages/matlab_msg_gen_ros1/glnxa64/src/cosmus_messages/msg'], 'std_msgs': ['/home/fabricio/MATLAB/R2021b/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg', '/home/fabricio/MATLAB/R2021b/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::cosmus_messages::NetworkComm_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cosmus_messages::NetworkComm_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cosmus_messages::NetworkComm_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cosmus_messages::NetworkComm_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cosmus_messages::NetworkComm_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cosmus_messages::NetworkComm_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cosmus_messages::NetworkComm_<ContainerAllocator> >
{
  static const char* value()
  {
    return "15a81aab5d0cd2839dc2a890c6fbc051";
  }

  static const char* value(const ::cosmus_messages::NetworkComm_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x15a81aab5d0cd283ULL;
  static const uint64_t static_value2 = 0x9dc2a890c6fbc051ULL;
};

template<class ContainerAllocator>
struct DataType< ::cosmus_messages::NetworkComm_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cosmus_messages/NetworkComm";
  }

  static const char* value(const ::cosmus_messages::NetworkComm_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cosmus_messages::NetworkComm_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Communication[] comms\n"
"\n"
"================================================================================\n"
"MSG: cosmus_messages/Communication\n"
"string ssid\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::cosmus_messages::NetworkComm_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cosmus_messages::NetworkComm_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.comms);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NetworkComm_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cosmus_messages::NetworkComm_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cosmus_messages::NetworkComm_<ContainerAllocator>& v)
  {
    s << indent << "comms[]" << std::endl;
    for (size_t i = 0; i < v.comms.size(); ++i)
    {
      s << indent << "  comms[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::cosmus_messages::Communication_<ContainerAllocator> >::stream(s, indent + "    ", v.comms[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // COSMUS_MESSAGES_MESSAGE_NETWORKCOMM_H
