// Generated by gencpp from file cosmus_communication/Odom.msg
// DO NOT EDIT!


#ifndef COSMUS_COMMUNICATION_MESSAGE_ODOM_H
#define COSMUS_COMMUNICATION_MESSAGE_ODOM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cosmus_communication
{
template <class ContainerAllocator>
struct Odom_
{
  typedef Odom_<ContainerAllocator> Type;

  Odom_()
    : pitch(0.0)
    , roll(0.0)
    , yaw(0.0)
    , position_x(0.0)
    , position_y(0.0)
    , position_z(0.0)
    , velocity(0.0)  {
    }
  Odom_(const ContainerAllocator& _alloc)
    : pitch(0.0)
    , roll(0.0)
    , yaw(0.0)
    , position_x(0.0)
    , position_y(0.0)
    , position_z(0.0)
    , velocity(0.0)  {
  (void)_alloc;
    }



   typedef double _pitch_type;
  _pitch_type pitch;

   typedef double _roll_type;
  _roll_type roll;

   typedef double _yaw_type;
  _yaw_type yaw;

   typedef double _position_x_type;
  _position_x_type position_x;

   typedef double _position_y_type;
  _position_y_type position_y;

   typedef double _position_z_type;
  _position_z_type position_z;

   typedef double _velocity_type;
  _velocity_type velocity;





  typedef boost::shared_ptr< ::cosmus_communication::Odom_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cosmus_communication::Odom_<ContainerAllocator> const> ConstPtr;

}; // struct Odom_

typedef ::cosmus_communication::Odom_<std::allocator<void> > Odom;

typedef boost::shared_ptr< ::cosmus_communication::Odom > OdomPtr;
typedef boost::shared_ptr< ::cosmus_communication::Odom const> OdomConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cosmus_communication::Odom_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cosmus_communication::Odom_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace cosmus_communication

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/home/fabricio/MATLAB/R2021b/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg'], 'cosmus_communication': ['/home/fabricio/catkin_ws/src/COSMUS_gnc/gnc_messages/matlab_msg_gen_ros1/glnxa64/src/cosmus_communication/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::cosmus_communication::Odom_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cosmus_communication::Odom_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cosmus_communication::Odom_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cosmus_communication::Odom_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cosmus_communication::Odom_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cosmus_communication::Odom_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cosmus_communication::Odom_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d43b451da51ce77be7284875a2ca7854";
  }

  static const char* value(const ::cosmus_communication::Odom_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd43b451da51ce77bULL;
  static const uint64_t static_value2 = 0xe7284875a2ca7854ULL;
};

template<class ContainerAllocator>
struct DataType< ::cosmus_communication::Odom_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cosmus_communication/Odom";
  }

  static const char* value(const ::cosmus_communication::Odom_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cosmus_communication::Odom_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 pitch\n"
"float64 roll\n"
"float64 yaw\n"
"float64 position_x\n"
"float64 position_y\n"
"float64 position_z\n"
"float64 velocity\n"
"\n"
;
  }

  static const char* value(const ::cosmus_communication::Odom_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cosmus_communication::Odom_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pitch);
      stream.next(m.roll);
      stream.next(m.yaw);
      stream.next(m.position_x);
      stream.next(m.position_y);
      stream.next(m.position_z);
      stream.next(m.velocity);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Odom_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cosmus_communication::Odom_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cosmus_communication::Odom_<ContainerAllocator>& v)
  {
    s << indent << "pitch: ";
    Printer<double>::stream(s, indent + "  ", v.pitch);
    s << indent << "roll: ";
    Printer<double>::stream(s, indent + "  ", v.roll);
    s << indent << "yaw: ";
    Printer<double>::stream(s, indent + "  ", v.yaw);
    s << indent << "position_x: ";
    Printer<double>::stream(s, indent + "  ", v.position_x);
    s << indent << "position_y: ";
    Printer<double>::stream(s, indent + "  ", v.position_y);
    s << indent << "position_z: ";
    Printer<double>::stream(s, indent + "  ", v.position_z);
    s << indent << "velocity: ";
    Printer<double>::stream(s, indent + "  ", v.velocity);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COSMUS_COMMUNICATION_MESSAGE_ODOM_H
