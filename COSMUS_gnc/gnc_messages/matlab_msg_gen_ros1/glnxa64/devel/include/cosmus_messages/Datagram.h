// Generated by gencpp from file cosmus_messages/Datagram.msg
// DO NOT EDIT!


#ifndef COSMUS_MESSAGES_MESSAGE_DATAGRAM_H
#define COSMUS_MESSAGES_MESSAGE_DATAGRAM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <cosmus_messages/Vector3D.h>

namespace cosmus_messages
{
template <class ContainerAllocator>
struct Datagram_
{
  typedef Datagram_<ContainerAllocator> Type;

  Datagram_()
    : ssid()
    , data()  {
    }
  Datagram_(const ContainerAllocator& _alloc)
    : ssid(_alloc)
    , data(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _ssid_type;
  _ssid_type ssid;

   typedef  ::cosmus_messages::Vector3D_<ContainerAllocator>  _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::cosmus_messages::Datagram_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cosmus_messages::Datagram_<ContainerAllocator> const> ConstPtr;

}; // struct Datagram_

typedef ::cosmus_messages::Datagram_<std::allocator<void> > Datagram;

typedef boost::shared_ptr< ::cosmus_messages::Datagram > DatagramPtr;
typedef boost::shared_ptr< ::cosmus_messages::Datagram const> DatagramConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cosmus_messages::Datagram_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cosmus_messages::Datagram_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace cosmus_messages

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'cosmus_messages': ['/home/fabricio/catkin_ws/src/COSMUS_gnc/gnc_messages/matlab_msg_gen_ros1/glnxa64/src/cosmus_messages/msg'], 'std_msgs': ['/home/fabricio/MATLAB/R2021b/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg', '/home/fabricio/MATLAB/R2021b/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::cosmus_messages::Datagram_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cosmus_messages::Datagram_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cosmus_messages::Datagram_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cosmus_messages::Datagram_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cosmus_messages::Datagram_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cosmus_messages::Datagram_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cosmus_messages::Datagram_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7602d23a0a18163d5a4467de20435330";
  }

  static const char* value(const ::cosmus_messages::Datagram_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7602d23a0a18163dULL;
  static const uint64_t static_value2 = 0x5a4467de20435330ULL;
};

template<class ContainerAllocator>
struct DataType< ::cosmus_messages::Datagram_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cosmus_messages/Datagram";
  }

  static const char* value(const ::cosmus_messages::Datagram_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cosmus_messages::Datagram_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Copyright (c) 2017, United States Government, as represented by the\n"
"# Administrator of the National Aeronautics and Space Administration.\n"
"#\n"
"# All rights reserved.\n"
"#\n"
"# The Astrobee platform is licensed under the Apache License, Version 2.0\n"
"# (the \"License\"); you may not use this file except in compliance with the\n"
"# License. You may obtain a copy of the License at\n"
"#\n"
"#     http://www.apache.org/licenses/LICENSE-2.0\n"
"#\n"
"# Unless required by applicable law or agreed to in writing, software\n"
"# distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n"
"# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n"
"# License for the specific language governing permissions and limitations\n"
"# under the License.\n"
"#\n"
"# A RFID signal characteristics\n"
"\n"
"string ssid            # hardware mac address of AP\n"
"cosmus_messages/Vector3D data # pose\n"
"\n"
"================================================================================\n"
"MSG: cosmus_messages/Vector3D\n"
"# ingroup subt_msgs\n"
"# interface Datagram\n"
"# A message containing some payload to communicate among one or\n"
"# multiple teammates.\n"
"\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
;
  }

  static const char* value(const ::cosmus_messages::Datagram_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cosmus_messages::Datagram_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ssid);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Datagram_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cosmus_messages::Datagram_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cosmus_messages::Datagram_<ContainerAllocator>& v)
  {
    s << indent << "ssid: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.ssid);
    s << indent << "data: ";
    s << std::endl;
    Printer< ::cosmus_messages::Vector3D_<ContainerAllocator> >::stream(s, indent + "  ", v.data);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COSMUS_MESSAGES_MESSAGE_DATAGRAM_H
