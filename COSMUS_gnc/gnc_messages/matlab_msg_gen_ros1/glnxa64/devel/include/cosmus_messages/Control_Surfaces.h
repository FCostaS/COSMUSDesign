// Generated by gencpp from file cosmus_messages/Control_Surfaces.msg
// DO NOT EDIT!


#ifndef COSMUS_MESSAGES_MESSAGE_CONTROL_SURFACES_H
#define COSMUS_MESSAGES_MESSAGE_CONTROL_SURFACES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cosmus_messages
{
template <class ContainerAllocator>
struct Control_Surfaces_
{
  typedef Control_Surfaces_<ContainerAllocator> Type;

  Control_Surfaces_()
    : propeller(0.0)
    , right_aileron(0.0)
    , right_flap(0.0)
    , elevators(0.0)
    , rudder(0.0)  {
    }
  Control_Surfaces_(const ContainerAllocator& _alloc)
    : propeller(0.0)
    , right_aileron(0.0)
    , right_flap(0.0)
    , elevators(0.0)
    , rudder(0.0)  {
  (void)_alloc;
    }



   typedef double _propeller_type;
  _propeller_type propeller;

   typedef double _right_aileron_type;
  _right_aileron_type right_aileron;

   typedef double _right_flap_type;
  _right_flap_type right_flap;

   typedef double _elevators_type;
  _elevators_type elevators;

   typedef double _rudder_type;
  _rudder_type rudder;





  typedef boost::shared_ptr< ::cosmus_messages::Control_Surfaces_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cosmus_messages::Control_Surfaces_<ContainerAllocator> const> ConstPtr;

}; // struct Control_Surfaces_

typedef ::cosmus_messages::Control_Surfaces_<std::allocator<void> > Control_Surfaces;

typedef boost::shared_ptr< ::cosmus_messages::Control_Surfaces > Control_SurfacesPtr;
typedef boost::shared_ptr< ::cosmus_messages::Control_Surfaces const> Control_SurfacesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cosmus_messages::Control_Surfaces_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cosmus_messages::Control_Surfaces_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace cosmus_messages

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'cosmus_messages': ['/home/fabricio/catkin_ws/src/COSMUS_gnc/gnc_messages/matlab_msg_gen_ros1/glnxa64/src/cosmus_messages/msg'], 'std_msgs': ['/home/fabricio/MATLAB/R2021b/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg', '/home/fabricio/MATLAB/R2021b/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::cosmus_messages::Control_Surfaces_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cosmus_messages::Control_Surfaces_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cosmus_messages::Control_Surfaces_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cosmus_messages::Control_Surfaces_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cosmus_messages::Control_Surfaces_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cosmus_messages::Control_Surfaces_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cosmus_messages::Control_Surfaces_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c0ac844265baab4b8605462ecb45014a";
  }

  static const char* value(const ::cosmus_messages::Control_Surfaces_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc0ac844265baab4bULL;
  static const uint64_t static_value2 = 0x8605462ecb45014aULL;
};

template<class ContainerAllocator>
struct DataType< ::cosmus_messages::Control_Surfaces_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cosmus_messages/Control_Surfaces";
  }

  static const char* value(const ::cosmus_messages::Control_Surfaces_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cosmus_messages::Control_Surfaces_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 propeller\n"
"float64 right_aileron\n"
"float64 right_flap\n"
"float64 elevators\n"
"float64 rudder\n"
;
  }

  static const char* value(const ::cosmus_messages::Control_Surfaces_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cosmus_messages::Control_Surfaces_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.propeller);
      stream.next(m.right_aileron);
      stream.next(m.right_flap);
      stream.next(m.elevators);
      stream.next(m.rudder);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Control_Surfaces_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cosmus_messages::Control_Surfaces_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cosmus_messages::Control_Surfaces_<ContainerAllocator>& v)
  {
    s << indent << "propeller: ";
    Printer<double>::stream(s, indent + "  ", v.propeller);
    s << indent << "right_aileron: ";
    Printer<double>::stream(s, indent + "  ", v.right_aileron);
    s << indent << "right_flap: ";
    Printer<double>::stream(s, indent + "  ", v.right_flap);
    s << indent << "elevators: ";
    Printer<double>::stream(s, indent + "  ", v.elevators);
    s << indent << "rudder: ";
    Printer<double>::stream(s, indent + "  ", v.rudder);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COSMUS_MESSAGES_MESSAGE_CONTROL_SURFACES_H
